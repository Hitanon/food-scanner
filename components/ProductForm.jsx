import React, { useState, useEffect } from 'react';
import { View, Text, Alert } from 'react-native';
import CustomButton from './CustomButton';
import InputField from './InputField';
import ImagePickerField from './ImagePickerField';

const ProductForm = ({ mode = 'create', initialProduct = null, onSubmit }) => {
  const [form, setForm] = useState({
    name: '',
    calories: '',
    proteins: '',
    fats: '',
    carbs: '',
    weight: '',
    imageLink: '',
  });

  const [adjustedValues, setAdjustedValues] = useState({
    calories: 0,
    proteins: 0,
    fats: 0,
    carbs: 0,
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if ((mode === 'edit' || mode === 'scan') && initialProduct) {
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ 100 –≥—Ä–∞–º–º
      const factor = mode === 'edit' ? initialProduct.weight / 100 : 1;
      setForm({
        name: initialProduct.name,
        calories: (initialProduct.calories / factor).toFixed(2),
        proteins: (initialProduct.proteins / factor).toFixed(2),
        fats: (initialProduct.fats / factor).toFixed(2),
        carbs: (initialProduct.carbs / factor).toFixed(2),
        weight: String(initialProduct.weight),
        imageLink: initialProduct.imageLink || '',
      });
    }
  }, [mode, initialProduct]);

  // –ü–µ—Ä–µ—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞
  useEffect(() => {
    recalculateAdjustedValues();
  }, [form.calories, form.proteins, form.fats, form.carbs, form.weight]);

  const recalculateAdjustedValues = () => {
    const multiplier = parseFloat(form.weight) / 100 || 0;
    setAdjustedValues({
      calories: parseFloat(form.calories) * multiplier || 0,
      proteins: parseFloat(form.proteins) * multiplier || 0,
      fats: parseFloat(form.fats) * multiplier || 0,
      carbs: parseFloat(form.carbs) * multiplier || 0,
    });
  };

  const handleInputChange = (field, value) => {
    setForm((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleSave = () => {
    const { name, weight, imageLink } = form;

    if (!name || !form.calories || !form.proteins || !form.fats || !form.carbs || !weight) {
      Alert.alert('‚ö†Ô∏è–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (
      mode === 'edit' &&
      name === initialProduct.name &&
      adjustedValues.calories === initialProduct.calories &&
      adjustedValues.proteins === initialProduct.proteins &&
      adjustedValues.fats === initialProduct.fats &&
      adjustedValues.carbs === initialProduct.carbs &&
      parseFloat(weight) === initialProduct.weight &&
      imageLink === initialProduct.imageLink
    ) {
      Alert.alert('‚ö†Ô∏è–û—à–∏–±–∫–∞', '–í—ã –Ω–µ –≤–Ω–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
      return;
    }

    const productData = {
      id: initialProduct?.id || '',
      name,
      calories: adjustedValues.calories,
      proteins: adjustedValues.proteins,
      fats: adjustedValues.fats,
      carbs: adjustedValues.carbs,
      weight: parseFloat(weight),
      imageLink,
    };

    onSubmit(productData);
  };

  return (
    <View>
      {/* –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      <ImagePickerField
        initialImage={form.imageLink}
        onImageSelected={(uri) => handleInputChange('imageLink', uri)}
      />

      {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ */}
      <InputField
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        value={form.name}
        onChangeText={(value) => handleInputChange('name', value)}
      />
      <Text className="text-sm text-gray-600 mb-2">–í–≤–µ–¥–∏—Ç–µ –¥–ª—è 100–≥—Ä –ø—Ä–æ–¥—É–∫—Ç–∞:</Text>
      <InputField
        label="üî• –∫–∫–∞–ª"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏"
        value={form.calories}
        onChangeText={(value) => handleInputChange('calories', value)}
        keyboardType="numeric"
      />
      <InputField
        label="–ë–µ–ª–∫–∏"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –±–µ–ª–∫–∏"
        value={form.proteins}
        onChangeText={(value) => handleInputChange('proteins', value)}
        keyboardType="numeric"
        labelStyles="text-green-700"
      />
      <InputField
        label="–ñ–∏—Ä—ã"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∂–∏—Ä—ã"
        value={form.fats}
        onChangeText={(value) => handleInputChange('fats', value)}
        keyboardType="numeric"
        labelStyles="text-orange-700"
      />
      <InputField
        label="–£–≥–ª–µ–≤–æ–¥—ã"
        placeholder="–í–≤–µ–¥–∏—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã"
        value={form.carbs}
        onChangeText={(value) => handleInputChange('carbs', value)}
        keyboardType="numeric"
        labelStyles="text-blue-700"
      />
      <InputField
        label="–í–µ—Å (–≥—Ä.)"
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å"
        value={form.weight}
        onChangeText={(value) => handleInputChange('weight', value)}
        keyboardType="numeric"
        labelStyles="text-gray-700"
      />

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ */}
      <View className="my-5">
        <Text className="text-base text-gray-700">–ù–∞ –≤–µ—Å: {form.weight}</Text>
        <Text className="text-base text-gray-700">–ö–∞–ª–æ—Ä–∏–∏ üî•: {adjustedValues.calories.toFixed(2)}</Text>
        <Text className="text-base text-gray-700">–ë–µ–ª–∫–∏: {adjustedValues.proteins.toFixed(2)}</Text>
        <Text className="text-base text-gray-700">–ñ–∏—Ä—ã: {adjustedValues.fats.toFixed(2)}</Text>
        <Text className="text-base text-gray-700">–£–≥–ª–µ–≤–æ–¥—ã: {adjustedValues.carbs.toFixed(2)}</Text>
      </View>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      <CustomButton
        title={mode === 'edit' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç'}
        handlePress={handleSave}
        containerStyles="bg-primary my-2 w-full"
        textStyles="text-white font-medium"
      />
    </View>
  );
};

export default ProductForm;
